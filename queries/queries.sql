create table public.debt (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  adolfo_debt double precision null default '0'::double precision,
  kari_debt double precision null default '0'::double precision,
  month text null,
  constraint debt_pkey primary key (id)
) TABLESPACE pg_default;

create table public.expenses (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  date date null,
  description text null,
  category text null,
  amount double precision null,
  type text null,
  "isPaidByKari" boolean null,
  is_default boolean not null default false,
  constraint expenses_pkey primary key (id)
) TABLESPACE pg_default;

create table public.income (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  kari_income double precision null,
  adolfo_income double precision null,
  total_income double precision null,
  kari_percentage double precision null,
  adolfo_percentage double precision null,
  total_percentage double precision null default '100'::double precision,
  constraint income_pkey primary key (id)
) TABLESPACE pg_default;

create table public.total_expenses (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  total double precision null default '0'::double precision,
  adolfo_total double precision null default '0'::double precision,
  kari_total double precision null default '0'::double precision,
  constraint total_expenses_pkey primary key (id)
) TABLESPACE pg_default;

CREATE OR REPLACE FUNCTION get_total_expenses()
RETURNS TABLE (
  total float,
  adolfo float,
  kari float
) AS $$
BEGIN
  RETURN QUERY
  WITH income_data AS (
    SELECT adolfo_percentage, kari_percentage
    FROM income
    ORDER BY created_at DESC
    LIMIT 1
  ),
  total_expenses AS (
    SELECT SUM(amount) AS total
    FROM expenses
  ),
  percentage_expenses AS (
    SELECT SUM(amount) AS total_percentage
    FROM expenses
    WHERE type = 'percentage'
  ),
  shared_expenses AS (
    SELECT SUM(amount) AS total_shared
    FROM expenses
    WHERE type = 'shared'
  ),
  kari_expenses AS (
    SELECT SUM(amount) AS total_kari
    FROM expenses
    WHERE type = 'kari'
  )
  SELECT
    ROUND(total_expenses.total::numeric, 2)::float,
    ROUND((
      percentage_expenses.total_percentage * income_data.adolfo_percentage / 100 +
      shared_expenses.total_shared / 2
    )::numeric, 2)::float,
    ROUND((
      percentage_expenses.total_percentage * income_data.kari_percentage / 100 +
      shared_expenses.total_shared / 2 +
      kari_expenses.total_kari
    )::numeric, 2)::float
  FROM income_data, total_expenses, percentage_expenses, shared_expenses, kari_expenses;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION get_kari_balance()
RETURNS TABLE (
  kari_balance float
) AS $$
BEGIN
  RETURN QUERY
  WITH kari_expense AS (
    SELECT kari_total
    FROM total_expenses
    ORDER BY created_at DESC
    LIMIT 1
  ),
  paid_by_kari AS (
    SELECT SUM(amount) AS total_kari
    FROM expenses
    WHERE "isPaidByKari" = true
  )
  SELECT
    ROUND((kari_expense.kari_total - paid_by_kari.total_kari)::numeric, 2)::float AS kari_balance
  FROM kari_expense, paid_by_kari;
END;
$$ LANGUAGE plpgsql;